version: '2.2'

services:
  qa_web:
    build:
      context: ../qa_web
      dockerfile: build_script/Dockerfile
    ports:
      - "80:80"
    depends_on:
      - qa_api
    networks:
      - qa_network

  qa_api:
    build:
      context: ../qa_api
      dockerfile: build_script/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ../qa_api:/app
    environment:
      - DJANGO_SETTINGS_MODULE=qa.settings
      - MYSQL_DATABASE=qa_db
      - MYSQL_USER=qa_user
      - MYSQL_PASSWORD=qa_password
      - MYSQL_HOST=mysql
      - REDIS_HOST=redis
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - qa_network
    command: sh /app/build_script/backend_api_init.sh
    restart: on-failure

  mysql:
    image: mysql/mysql-server:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_DATABASE=qa_db
      - MYSQL_USER=qa_user
      - MYSQL_PASSWORD=qa_password
      - MYSQL_ROOT_PASSWORD=root_password
    volumes:
      - ../data/mysql:/var/lib/mysql
      - ./mysql.cnf:/etc/mysql/conf.d/mysql.cnf
    networks:
      - qa_network
    restart: unless-stopped
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - ../data/redis:/data
    command: redis-server --appendonly yes
    networks:
      - qa_network
    restart: unless-stopped

networks:
  qa_network:
    driver: bridge
